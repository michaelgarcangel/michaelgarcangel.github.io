---
layout: essay
type: essay
title: There's no Such Thing as a Dumb Question... Or is there?
# All dates must be YYYY-MM-DD format!
date: 2018-09-06
labels:
  - Software Engineering
  - Coding
---

<img class="ui tiny left circular floated image" src="../images/maxresdefault.jpg">

## Asking Smart Questions
Going into Computer Science and finding out I had to learn how to code wasn't a shock for me. It's in the description after all. I was a little shocked at first in learning how to actually write my own code without following someone on YouTube and just copying whatever they typed into their computer. What did surprise me is how precise you have to be when writing your algorithms. Computers do exactly what you tell them to do, and that's both a very good and very bad thing. There's no inferring or assumption that humans could possibly make, but there's also zero error in that sense. Learning different programming languages have presented different syntaxes, but throughout everything I have seen, much of the issues with semantics really remain the same.

## Asking Not So Smart Questions
Learning Javascript for the first time in ICS 314 came pretty easily to me since I had already learned Java in ICS 111 and 211. However, the simplicity and flexibility of Javascript leads me to wonder why I even bothered with Java in the first place. The different return types that methods had to provide was always difficult for me to keep track of. With Javascript, functions are much easier to work with and even code as opposed to methods in Java. The lack of a main method in Javascript also makes testing code after it being written a total breeze, since there's no room for error. Compared to C and Java, I think Javascript is far superior. However, I'm still new to coding so I probably haven't considered each programming language through a variety of applications to see how one could prove useful over the other. 

## Smart Questions, Smart Software
Workouts of the Day, or WODs in ICS 314 were a completely new concept to me. Being presented a problem, and being asked to solve it within time constraints in mere minutes was such a shock. When given a coding assignment, I usually take my time to plan out the steps and do some research to see how other people tackled similar problems before proceeding. Athletic software engineering as my professor likes to call it presents an entirely new method of progressing your coding skills. Programming with the intent of speed and precision seems counterproductive, but it allows you to access methods of problem solving that you probably have never considered previously. All in all, I think that the WODs are excellent methods of practicing to code.

## Wrap Up
All things considered, my prior coding experience and my current experience with Javascript, along with the introduction of Athletic Software Engineering, I have had an overall pleasant experience. Although there are challenges that present themselves with coding, the small break in the action where your code actually decides to work, and you can observe the results of your hard work and resilience makes it completely worth it. The problems seem very daunting especially on larger assignments that require complex algorithms. However, I believe that larger challenges present larger and more satisfying rewards. Since I'm still learning Javascript, I'm sure that by the end of the semester I'll be able to reflect on my progress and be proud of my own progress.

