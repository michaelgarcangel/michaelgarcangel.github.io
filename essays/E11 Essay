---
layout: essay
type: essay
title: There's no Such Thing as a Dumb Question... Or is there?
# All dates must be YYYY-MM-DD format!
date: 2018-09-06
labels:
  - Software Engineering
  - Coding
---

<img class="ui tiny left circular floated image" src="../images/maxresdefault.jpg">

## Asking Smart Questions


## Asking Not So Smart Questions
https://stackoverflow.com/questions/52211303/java-rock-paper-game-loops-too-many-times
In this example, the developer does not take the time to simplify their code or even run test cases in order to attempt to debug the code themselves. They paste whatever their current code stands as and asks the community to answer the problem for them. According to Raymond, one of the fundamentals is being precise and informative about the problem. And in one of those bullets in that same section, also states that there should be diagnostic steps taken in order to fix the problem before asking the question. In the post, the developer does neither of these practices. The code is very lengthy and shows a lack of effort taken in order to solve the problem for themselves.

## Smart Questions, Smart Software
Smart questions make processes flow more smoothly. When doctors diagnose their patients, they ask the appropriate questions in order to gather the necessary information in order to help them recover. The practice is the same for software development. When debugging or collaborating on a certain issue, asking smart questions as directed by Raymond in the essay can illicit a smarter response. It should be commonplace to have the courtesy to make it as convenient and concise as possible when asking for a solution. One important point Raymond brings up is that "Grovelling is not a substitute for doing your homework", which is completely true. Instead of pointing out that your knowledge is not as broad or complete as it should be on the subject matter, it could be beneficial and very time-efficient for both parties in order for the one asking questions to take the time to do research and learn more about their inquiry.

## Wrap Up
All things considered, my prior coding experience and my current experience with Javascript, along with the introduction of Athletic Software Engineering, I have had an overall pleasant experience. Although there are challenges that present themselves with coding, the small break in the action where your code actually decides to work, and you can observe the results of your hard work and resilience makes it completely worth it. The problems seem very daunting especially on larger assignments that require complex algorithms. However, I believe that larger challenges present larger and more satisfying rewards. Since I'm still learning Javascript, I'm sure that by the end of the semester I'll be able to reflect on my progress and be proud of my own progress.

